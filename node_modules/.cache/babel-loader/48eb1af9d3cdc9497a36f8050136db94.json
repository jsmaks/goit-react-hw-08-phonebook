{"ast":null,"code":"import axios from \"axios\";\nimport authActions from \"./auth-actions\";\naxios.default.baseURL = \"https://connections-api.herokuapp.com/\";\nconst token = {\n  set(token) {\n    axios.defaults.headers.common.Authorization = `Bearer ${token}`;\n  },\n\n  unset() {\n    axios.defaults.headers.common.Authorization = \"\";\n  }\n\n};\n\nconst register = credentials => async dispatch => {\n  dispatch(authActions.registerRequest());\n\n  try {\n    const response = await axios.post(\"/users/signup\", credentials);\n    token.set(response.data.token);\n    dispatch(authActions.registerSuccess(response.data));\n  } catch (error) {\n    dispatch(authActions.registerError(error.message));\n  }\n};\n\nconst login = credentials => async dispatch => {\n  dispatch(authActions.loginRequest());\n\n  try {\n    const response = await axios.post(\"/users/login\", credentials);\n    token.set(response.data.token);\n    dispatch(authActions.loginSuccess(response.data));\n  } catch (error) {\n    dispatch(authActions.loginError(error.message));\n  }\n};\n\nconst logout = () => async dispatch => {\n  dispatch(authActions.logoutRequest());\n\n  try {\n    await axios.post(\"/users/logout\");\n    token.unset();\n    dispatch(authActions.logoutSuccess());\n  } catch (error) {\n    dispatch(authActions.logoutError(error.message));\n  }\n};\n\nconst getCurrentUser = () => async (dispatch, getState) => {\n  const {\n    auth: {\n      token: persistedToken\n    }\n  } = getState();\n  if (!persistedToken) return;\n  token.set(persistedToken);\n  dispatch(authActions.getCurrentUserRequest());\n\n  try {\n    const response = await axios.get(\"/users/current\");\n    dispatch(authActions.getCurrentUserSuccess(response.data));\n  } catch (error) {\n    dispatch(authActions.getCurrentUserError(error.message));\n  }\n}; // export default { register, logOut, login, getCurrentUser };\n// eslint-disable-next-line\n\n\nexport default {\n  register,\n  login,\n  logout,\n  getCurrentUser\n};","map":{"version":3,"sources":["D:/GitHUB/React/goit-react-hw-08-phonebook/src/redux/auth/auth-operations.js"],"names":["axios","authActions","default","baseURL","token","set","defaults","headers","common","Authorization","unset","register","credentials","dispatch","registerRequest","response","post","data","registerSuccess","error","registerError","message","login","loginRequest","loginSuccess","loginError","logout","logoutRequest","logoutSuccess","logoutError","getCurrentUser","getState","auth","persistedToken","getCurrentUserRequest","get","getCurrentUserSuccess","getCurrentUserError"],"mappings":"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","sourcesContent":["import axios from \"axios\";\r\nimport authActions from \"./auth-actions\";\r\n\r\naxios.default.baseURL = \"https://connections-api.herokuapp.com/\";\r\n\r\nconst token = {\r\n  set(token) {\r\n    axios.defaults.headers.common.Authorization = `Bearer ${token}`;\r\n  },\r\n  unset() {\r\n    axios.defaults.headers.common.Authorization = \"\";\r\n  },\r\n};\r\n\r\nconst register = (credentials) => async (dispatch) => {\r\n  dispatch(authActions.registerRequest());\r\n\r\n  try {\r\n    const response = await axios.post(\"/users/signup\", credentials);\r\n    token.set(response.data.token);\r\n    dispatch(authActions.registerSuccess(response.data));\r\n  } catch (error) {\r\n    dispatch(authActions.registerError(error.message));\r\n  }\r\n};\r\n\r\nconst login = (credentials) => async (dispatch) => {\r\n  dispatch(authActions.loginRequest());\r\n  try {\r\n    const response = await axios.post(\"/users/login\", credentials);\r\n\r\n    token.set(response.data.token);\r\n    dispatch(authActions.loginSuccess(response.data));\r\n  } catch (error) {\r\n    dispatch(authActions.loginError(error.message));\r\n  }\r\n};\r\nconst logout = () => async (dispatch) => {\r\n  dispatch(authActions.logoutRequest());\r\n  try {\r\n    await axios.post(\"/users/logout\");\r\n\r\n    token.unset();\r\n\r\n    dispatch(authActions.logoutSuccess());\r\n  } catch (error) {\r\n    dispatch(authActions.logoutError(error.message));\r\n  }\r\n};\r\n\r\nconst getCurrentUser = () => async (dispatch, getState) => {\r\n  const {\r\n    auth: { token: persistedToken },\r\n  } = getState();\r\n  if (!persistedToken) return;\r\n\r\n  token.set(persistedToken);\r\n  dispatch(authActions.getCurrentUserRequest());\r\n\r\n  try {\r\n    const response = await axios.get(\"/users/current\");\r\n\r\n    dispatch(authActions.getCurrentUserSuccess(response.data));\r\n  } catch (error) {\r\n    dispatch(authActions.getCurrentUserError(error.message));\r\n  }\r\n};\r\n\r\n// export default { register, logOut, login, getCurrentUser };\r\n// eslint-disable-next-line\r\nexport default { register, login, logout, getCurrentUser };\r\n"]},"metadata":{},"sourceType":"module"}