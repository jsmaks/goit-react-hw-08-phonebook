{"ast":null,"code":"var _jsxFileName = \"D:\\\\GitHUB\\\\React\\\\goit-react-hw-08-phonebook\\\\src\\\\components\\\\PublicRoute.js\";\nimport React from \"react\";\nimport { Route, Redirect } from 'react-router-dom';\nimport { connect } from 'react-redux';\nimport { authSelectors } from '../redux/auth';\n/**\r\n * - Если маршрут ограниченный, и пользователь залогинен, рендерит редирект на /contacts\r\n * - В противном случае рендерит компонент\r\n */\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst PublicRoute = ({\n  component: Component,\n  isAuthenticated,\n  redirectTo,\n  ...routeProps\n}) => /*#__PURE__*/_jsxDEV(Route, { ...routeProps,\n  render: props => isAuthenticated && routeProps.restricted ? /*#__PURE__*/_jsxDEV(Redirect, {\n    to: redirectTo\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 21,\n    columnNumber: 9\n  }, this) : /*#__PURE__*/_jsxDEV(Component, { ...props\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 23,\n    columnNumber: 9\n  }, this)\n}, void 0, false, {\n  fileName: _jsxFileName,\n  lineNumber: 17,\n  columnNumber: 3\n}, this);\n\n_c = PublicRoute;\n\nconst mapStateToProps = state => ({\n  isAuthenticated: authSelectors.getAuthenticated(state)\n});\n\nexport default connect(mapStateToProps)(PublicRoute);\n\nvar _c;\n\n$RefreshReg$(_c, \"PublicRoute\");","map":{"version":3,"sources":["D:/GitHUB/React/goit-react-hw-08-phonebook/src/components/PublicRoute.js"],"names":["React","Route","Redirect","connect","authSelectors","PublicRoute","component","Component","isAuthenticated","redirectTo","routeProps","props","restricted","mapStateToProps","state","getAuthenticated"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAAQC,KAAR,EAAeC,QAAf,QAA8B,kBAA9B;AACA,SAAQC,OAAR,QAAsB,aAAtB;AACA,SAAQC,aAAR,QAA4B,eAA5B;AAGA;AACA;AACA;AACA;;;;AACA,MAAMC,WAAW,GAAG,CAAC;AACnBC,EAAAA,SAAS,EAAEC,SADQ;AAEnBC,EAAAA,eAFmB;AAGnBC,EAAAA,UAHmB;AAInB,KAAGC;AAJgB,CAAD,kBAMlB,QAAC,KAAD,OACMA,UADN;AAEE,EAAA,MAAM,EAAEC,KAAK,IACXH,eAAe,IAAIE,UAAU,CAACE,UAA9B,gBACE,QAAC,QAAD;AAAU,IAAA,EAAE,EAAEH;AAAd;AAAA;AAAA;AAAA;AAAA,UADF,gBAGE,QAAC,SAAD,OAAeE;AAAf;AAAA;AAAA;AAAA;AAAA;AANN;AAAA;AAAA;AAAA;AAAA,QANF;;KAAMN,W;;AAkBN,MAAMQ,eAAe,GAAGC,KAAK,KAAK;AAC9BN,EAAAA,eAAe,EAAEJ,aAAa,CAACW,gBAAd,CAA+BD,KAA/B;AADa,CAAL,CAA7B;;AAKA,eAAeX,OAAO,CAACU,eAAD,CAAP,CAAyBR,WAAzB,CAAf","sourcesContent":["import React from \"react\";\r\nimport {Route, Redirect} from 'react-router-dom';\r\nimport {connect} from 'react-redux';\r\nimport {authSelectors} from '../redux/auth';\r\n\r\n\r\n/**\r\n * - Если маршрут ограниченный, и пользователь залогинен, рендерит редирект на /contacts\r\n * - В противном случае рендерит компонент\r\n */\r\nconst PublicRoute = ({\r\n  component: Component,\r\n  isAuthenticated,\r\n  redirectTo,\r\n  ...routeProps\r\n}) => (\r\n  <Route\r\n    {...routeProps}\r\n    render={props =>\r\n      isAuthenticated && routeProps.restricted ? (\r\n        <Redirect to={redirectTo} />\r\n      ) : (\r\n        <Component {...props} />\r\n      )\r\n    }\r\n  />\r\n);\r\n\r\nconst mapStateToProps = state => ({\r\n    isAuthenticated: authSelectors.getAuthenticated(state),\r\n})\r\n\r\n\r\nexport default connect(mapStateToProps)(PublicRoute);"]},"metadata":{},"sourceType":"module"}