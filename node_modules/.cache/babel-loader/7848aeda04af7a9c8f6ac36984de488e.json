{"ast":null,"code":"import { combineReducers } from \"redux\";\nimport { createReducer } from \"@reduxjs/toolkit\";\nimport authActions from \"./auth-actions\";\nconst initialUserState = {\n  name: null,\n  email: null\n};\nconst user = createReducer(initialUserState, {\n  [authActions.registerSuccess]: (_state, {\n    payload\n  }) => payload.user,\n  [authActions.loginSuccess]: (_state, {\n    payload\n  }) => payload.user,\n  [authActions.logoutSuccess]: () => initialUserState,\n  [authActions.getCurrentUserSuccess]: (_, {\n    payload\n  }) => payload\n});\nconst token = createReducer(null, {\n  [authActions.registerSuccess]: (_state, {\n    payload\n  }) => payload.token,\n  [authActions.loginSuccess]: (_state, {\n    payload\n  }) => payload.token,\n  [authActions.logoutSuccess]: () => null\n});\nconst error = createReducer(null, {\n  [authActions.registerError]: (_, {\n    payload\n  }) => payload,\n  [authActions.loginError]: (_, {\n    payload\n  }) => payload,\n  [authActions.logoutError]: (_, {\n    payload\n  }) => payload,\n  [authActions.getCurrentUserError]: (_, {\n    payload\n  }) => payload\n});\nconst isAuthenticated = createReducer(false, {\n  [authActions.registerSuccess]: () => true,\n  [authActions.loginSuccess]: () => true,\n  [authActions.getCurrentUserSuccess]: () => true,\n  [authActions.registerError]: () => false,\n  [authActions.loginError]: () => false,\n  [authActions.getCurrentUserError]: () => false,\n  [authActions.logoutSuccess]: () => false\n});\nexport default combineReducers({\n  user,\n  isAuthenticated,\n  token,\n  error\n});","map":{"version":3,"sources":["D:/GitHUB/React/goit-react-hw-08-phonebook/src/redux/auth/auth-reducer.js"],"names":["combineReducers","createReducer","authActions","initialUserState","name","email","user","registerSuccess","_state","payload","loginSuccess","logoutSuccess","getCurrentUserSuccess","_","token","error","registerError","loginError","logoutError","getCurrentUserError","isAuthenticated"],"mappings":"AAAA,SAASA,eAAT,QAAgC,OAAhC;AACA,SAASC,aAAT,QAA8B,kBAA9B;AACA,OAAOC,WAAP,MAAwB,gBAAxB;AAEA,MAAMC,gBAAgB,GAAG;AAAEC,EAAAA,IAAI,EAAE,IAAR;AAAcC,EAAAA,KAAK,EAAE;AAArB,CAAzB;AAEA,MAAMC,IAAI,GAAGL,aAAa,CAACE,gBAAD,EAAmB;AAC3C,GAACD,WAAW,CAACK,eAAb,GAA+B,CAACC,MAAD,EAAS;AAACC,IAAAA;AAAD,GAAT,KAAuBA,OAAO,CAACH,IADnB;AAE3C,GAACJ,WAAW,CAACQ,YAAb,GAA4B,CAACF,MAAD,EAAS;AAACC,IAAAA;AAAD,GAAT,KAAuBA,OAAO,CAACH,IAFhB;AAG3C,GAACJ,WAAW,CAACS,aAAb,GAA6B,MAAMR,gBAHQ;AAI3C,GAACD,WAAW,CAACU,qBAAb,GAAqC,CAACC,CAAD,EAAI;AAACJ,IAAAA;AAAD,GAAJ,KAAkBA;AAJZ,CAAnB,CAA1B;AAQA,MAAMK,KAAK,GAAGb,aAAa,CAAC,IAAD,EAAO;AAChC,GAACC,WAAW,CAACK,eAAb,GAA+B,CAACC,MAAD,EAAS;AAACC,IAAAA;AAAD,GAAT,KAAuBA,OAAO,CAACK,KAD9B;AAEhC,GAACZ,WAAW,CAACQ,YAAb,GAA4B,CAACF,MAAD,EAAS;AAACC,IAAAA;AAAD,GAAT,KAAuBA,OAAO,CAACK,KAF3B;AAGhC,GAACZ,WAAW,CAACS,aAAb,GAA6B,MAAK;AAHF,CAAP,CAA3B;AAMA,MAAMI,KAAK,GAAGd,aAAa,CAAC,IAAD,EAAO;AAChC,GAACC,WAAW,CAACc,aAAb,GAA6B,CAACH,CAAD,EAAI;AAACJ,IAAAA;AAAD,GAAJ,KAAiBA,OADd;AAEhC,GAACP,WAAW,CAACe,UAAb,GAA0B,CAACJ,CAAD,EAAI;AAACJ,IAAAA;AAAD,GAAJ,KAAiBA,OAFX;AAGhC,GAACP,WAAW,CAACgB,WAAb,GAA2B,CAACL,CAAD,EAAI;AAACJ,IAAAA;AAAD,GAAJ,KAAkBA,OAHb;AAIhC,GAACP,WAAW,CAACiB,mBAAb,GAAmC,CAACN,CAAD,EAAI;AAACJ,IAAAA;AAAD,GAAJ,KAAiBA;AAJpB,CAAP,CAA3B;AAOA,MAAMW,eAAe,GAAGnB,aAAa,CAAC,KAAD,EAAQ;AAC3C,GAACC,WAAW,CAACK,eAAb,GAA+B,MAAK,IADO;AAE3C,GAACL,WAAW,CAACQ,YAAb,GAA4B,MAAK,IAFU;AAG3C,GAACR,WAAW,CAACU,qBAAb,GAAqC,MAAK,IAHC;AAI3C,GAACV,WAAW,CAACc,aAAb,GAA6B,MAAK,KAJS;AAK3C,GAACd,WAAW,CAACe,UAAb,GAA0B,MAAK,KALY;AAM3C,GAACf,WAAW,CAACiB,mBAAb,GAAmC,MAAK,KANG;AAO3C,GAACjB,WAAW,CAACS,aAAb,GAA6B,MAAI;AAPU,CAAR,CAArC;AAUA,eAAeX,eAAe,CAAC;AAC7BM,EAAAA,IAD6B;AAE7Bc,EAAAA,eAF6B;AAG7BN,EAAAA,KAH6B;AAI7BC,EAAAA;AAJ6B,CAAD,CAA9B","sourcesContent":["import { combineReducers } from \"redux\";\r\nimport { createReducer } from \"@reduxjs/toolkit\";\r\nimport authActions from \"./auth-actions\";\r\n\r\nconst initialUserState = { name: null, email: null };\r\n\r\nconst user = createReducer(initialUserState, {\r\n  [authActions.registerSuccess]: (_state, {payload}) => payload.user,\r\n  [authActions.loginSuccess]: (_state, {payload}) => payload.user,\r\n  [authActions.logoutSuccess]: () => initialUserState,\r\n  [authActions.getCurrentUserSuccess]: (_, {payload}) => payload\r\n});\r\n\r\n\r\nconst token = createReducer(null, {\r\n  [authActions.registerSuccess]: (_state, {payload}) => payload.token,\r\n  [authActions.loginSuccess]: (_state, {payload}) => payload.token,\r\n  [authActions.logoutSuccess]: ()=> null,\r\n});\r\n\r\nconst error = createReducer(null, {\r\n  [authActions.registerError]: (_, {payload})=> payload,\r\n  [authActions.loginError]: (_, {payload})=> payload,\r\n  [authActions.logoutError]: (_, {payload}) => payload,\r\n  [authActions.getCurrentUserError]: (_, {payload})=> payload,\r\n});\r\n\r\nconst isAuthenticated = createReducer(false, {\r\n  [authActions.registerSuccess]: ()=> true,\r\n  [authActions.loginSuccess]: ()=> true,\r\n  [authActions.getCurrentUserSuccess]: ()=> true,\r\n  [authActions.registerError]: ()=> false,\r\n  [authActions.loginError]: ()=> false,\r\n  [authActions.getCurrentUserError]: ()=> false,\r\n  [authActions.logoutSuccess]: ()=>false,\r\n\r\n})\r\nexport default combineReducers({\r\n  user,\r\n  isAuthenticated,\r\n  token,\r\n  error,\r\n});\r\n"]},"metadata":{},"sourceType":"module"}