{"version":3,"sources":["redux/phonebook/phonebook-actions.js","redux/phonebook/phonebook-operations.js","redux/phonebook/phonebook-selectors.js","components/FormContacts/Form.js","components/Contacts/ContactsList.jsx","components/Filter/Filter.jsx","components/Container/Container.js","pages/Phonebook.js","App.js","redux/phonebook/phonebook-reducer.js","redux/store.js","index.js"],"names":["fetchContactsRequest","createAction","fetchContactsSuccess","fetchContactsError","addContactRequest","addContactSuccess","addContactError","deleteContactRequest","deleteContactSuccess","deleteContactError","changeFilter","axios","defaults","baseURL","data","dispatch","post","then","catch","error","id","delete","a","get","getFilter","state","contacts","filter","getAllContacts","items","getLoading","loading","getVisibleContacts","createSelector","normalizedFilter","toLocaleLowerCase","name","toLowerCase","includes","Form","number","handleChange","e","currentTarget","value","setState","handleSubmit","preventDefault","checkOnDuplicate","props","libraryContacts","reset","list","nameLowerCase","find","alert","addContact","this","onSubmit","type","pattern","title","required","onChange","className","Component","connect","contactSelectors","contactOperations","contactsSelectors","onDelete","map","el","onClick","event","actions","Container","children","Phonebook","fetchContacts","isLoadingContacts","contactsOperations","App","createReducer","_state","payload","filterReducer","action","combineReducers","middleware","getDefaultMiddleware","serializableCheck","ignoredActions","FLUSH","REHYDRATE","PAUSE","PERSIST","PURGE","REGISTER","store","configureStore","reducer","phonebookReducer","devToold","process","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.9dcf4868.chunk.js","sourcesContent":["/* eslint-disable import/no-anonymous-default-export */\r\n\r\n\r\nimport { createAction } from \"@reduxjs/toolkit\";\r\n\r\nexport const fetchContactsRequest = createAction(\"contacts/fetchContactsRequest\");\r\nexport const fetchContactsSuccess = createAction(\"contacts/fetchContactsSuccess\");\r\nexport const fetchContactsError = createAction(\"contacts/fetchContactsError\");\r\n\r\n\r\nexport const addContactRequest = createAction(\"contacts/addContactRequest\");\r\nexport const addContactSuccess = createAction(\"contacts/addContactSuccess\");\r\nexport const addContactError = createAction(\"contacts/addContactError\");\r\n\r\nexport const deleteContactRequest = createAction(\"contacts/deleteContactRequest\");\r\nexport const deleteContactSuccess = createAction(\"contacts/deleteContactSuccess\");\r\nexport const deleteContactError = createAction(\"contacts/deleteContactError\");\r\n\r\n\r\n\r\nexport const changeFilter = createAction(\"contacts/changeFilter\");\r\n\r\n\r\n\r\n","import axios from \"axios\";\r\nimport {\r\n  addContactRequest,\r\n  addContactSuccess,\r\n  addContactError,\r\n  deleteContactRequest,\r\n  deleteContactSuccess,\r\n  deleteContactError,\r\n  fetchContactsRequest,\r\n  fetchContactsSuccess,\r\n  fetchContactsError,\r\n} from \"./phonebook-actions\";\r\n\r\naxios.defaults.baseURL = \"http://localhost:4040\";\r\n\r\nconst fetchContacts = () => async (dispatch) => {\r\n  dispatch(fetchContactsRequest());\r\n  try {\r\n    const { data } = await axios.get(\"/contacts\");\r\n    dispatch(fetchContactsSuccess(data));\r\n  } catch (error) {\r\n    dispatch(fetchContactsError(error));\r\n  }\r\n\r\n  //   axios\r\n  //     .get(\"/contacts\")\r\n  //     .then(({ data }) => dispatch(fetchContactsSuccess(data)))\r\n  //     .catch((error) => dispatch(fetchContactsError(error)));\r\n};\r\n\r\nconst addContact = (data) => (dispatch) => {\r\n  dispatch(addContactRequest());\r\n  axios\r\n    .post(\"/contacts\", data)\r\n    .then(({ data }) => dispatch(addContactSuccess(data)))\r\n    .catch((error) => dispatch(addContactError(error)));\r\n};\r\n\r\nconst deleteContact = (id) => (dispatch) => {\r\n  dispatch(deleteContactRequest());\r\n\r\n  axios\r\n    .delete(`/contacts/${id}`)\r\n    .then(() => dispatch(deleteContactSuccess(id)))\r\n    .catch((error) => dispatch(deleteContactError(error)));\r\n};\r\n\r\n// eslint-disable-next-line\r\nexport default {\r\n  addContact,\r\n  deleteContact,\r\n  fetchContacts,\r\n};\r\n","import { createSelector } from \"@reduxjs/toolkit\";\r\nconst getLoading = (state) => state.contacts.loading;\r\n\r\nconst getFilter = (state) => state.contacts.filter;\r\n\r\nconst getAllContacts = (state) => state.contacts.items;\r\n\r\n\r\nconst getVisibleContacts = createSelector(\r\n  [getAllContacts, getFilter],\r\n  (contacts, filter) => {\r\n    const normalizedFilter = filter.toLocaleLowerCase();\r\n    return contacts.filter(({ name }) =>\r\n      name.toLowerCase().includes(normalizedFilter)\r\n    );\r\n  }\r\n);\r\n\r\n// eslint-disable-next-line\r\nexport default {\r\n  getLoading,\r\n  getFilter,\r\n  getVisibleContacts,\r\n  getAllContacts,\r\n};\r\n//----------------------------------------------------------\r\n// const getVisibleContacts = (state) => {\r\n//   const allContacts = getAllContacts(state);\r\n//   const filter = getFilter(state);\r\n//   const normalizedFilter = filter.toLocaleLowerCase();\r\n\r\n//   return allContacts.filter(({ name }) =>\r\n//     name.toLowerCase().includes(normalizedFilter)\r\n//   );\r\n// };\r\n","import React, { Component } from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport { connect } from \"react-redux\";\r\nimport contactOperations from \"../../redux/phonebook/phonebook-operations\";\r\nimport contactSelectors from \"../../redux/phonebook/phonebook-selectors\";\r\nimport \"./Form.css\";\r\nclass Form extends Component {\r\n  state = {\r\n    name: \"\",\r\n    number: \"\",\r\n  };\r\n  handleChange = (e) => {\r\n    const { name, value } = e.currentTarget;\r\n\r\n    this.setState({\r\n      [name]: value,\r\n    });\r\n  };\r\n\r\n  handleSubmit = (e) => {\r\n    e.preventDefault();\r\n    this.checkOnDuplicate(this.props.libraryContacts);\r\n    this.reset();\r\n  };\r\n  checkOnDuplicate = (list) => {\r\n    const nameLowerCase = this.state.name.toLowerCase();\r\n\r\n    list.find(({ name }) => name.toLowerCase() === nameLowerCase)\r\n      ? alert(`${this.state.name} is alredy in contacts`)\r\n      : this.props.addContact(this.state);\r\n  };\r\n\r\n  reset = () => {\r\n    this.setState({ name: \"\", number: \"\" });\r\n  };\r\n\r\n  render() {\r\n    const { name, number } = this.state;\r\n    return (\r\n      <form onSubmit={this.handleSubmit}>\r\n        <label>\r\n          Name\r\n          <input\r\n            type=\"text\"\r\n            name=\"name\"\r\n            pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\r\n            title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\r\n            required\r\n            value={name}\r\n            onChange={this.handleChange}\r\n          />\r\n        </label>\r\n\r\n        <label>\r\n          Number\r\n          <input\r\n            type=\"tel\"\r\n            name=\"number\"\r\n            pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\r\n            title=\"Номер телефона должен состоять цифр и может содержать пробелы, тире, круглые скобки и может начинаться с +\"\r\n            required\r\n            value={number}\r\n            onChange={this.handleChange}\r\n          />\r\n        </label>\r\n\r\n        <button className=\"btn\" type=\"submit\">\r\n          Добавить\r\n        </button>\r\n      </form>\r\n    );\r\n  }\r\n}\r\n\r\nForm.propTypes = {\r\n  state: PropTypes.shape({\r\n    name: PropTypes.string,\r\n    number: PropTypes.number,\r\n  }),\r\n\r\n  handleChange: PropTypes.func,\r\n  handleSubmit: PropTypes.func,\r\n};\r\n\r\nconst mapStateToProps = (state) => ({\r\n  libraryContacts: contactSelectors.getAllContacts(state),\r\n});\r\n\r\nconst mapDispatchToProps = (dispatch) => ({\r\n  addContact: (data) => dispatch(contactOperations.addContact(data)),\r\n});\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Form);\r\n","import \"./Contacts.css\";\r\nimport { connect } from \"react-redux\";\r\nimport PropTypes from \"prop-types\";\r\nimport {contactsSelectors, contactOperations} from '../../redux/phonebook'\r\n\r\nconst Contacts = ({ libraryContacts, onDelete }) => {\r\n  return (\r\n    <div>\r\n      <ul className=\"contacts__list\">\r\n        {libraryContacts.map((el) => (\r\n          <li className=\"contacts__item\" key={el.id}>\r\n            <p className=\"contact__name\">\r\n              {el.name}:<span className=\"contact__tel\">{el.number}</span>\r\n            </p>\r\n            <button className=\"btn btn-delete\" onClick={() => onDelete(el.id)}>\r\n              Delete\r\n            </button>\r\n          </li>\r\n        ))}\r\n      </ul>\r\n    </div>\r\n  );\r\n};\r\n\r\nContacts.propTypes = {\r\n  onDelete: PropTypes.func,\r\n};\r\n\r\n\r\nconst mapStateToProps = (state) => ({\r\n  libraryContacts: contactsSelectors.getVisibleContacts(state),\r\n});\r\n\r\nconst mapDisptachToProps = (dispatch) => ({\r\n  onDelete: (id) => dispatch(contactOperations.deleteContact(id)),\r\n});\r\nexport default connect(mapStateToProps, mapDisptachToProps)(Contacts);\r\n\r\n","import { connect } from \"react-redux\";\r\nimport * as actions from \"../../redux/phonebook/phonebook-actions\";\r\nimport contactsSelectors from '../../redux/phonebook/phonebook-selectors'\r\n\r\nconst Filter = ({ value, onChange }) => {\r\n \r\n  return (\r\n    <label>\r\n      Find contacts by name\r\n      <input type=\"text\" value={value} onChange={onChange} />\r\n    </label>\r\n  );\r\n};\r\nconst mapStateToProps = (state) => ({\r\n    value: contactsSelectors.getFilter(state)\r\n});\r\n\r\nconst mapDispatchToProps = (dispatch) => ({\r\n  onChange: (event) =>\r\n    dispatch(actions.changeFilter(event.currentTarget.value)),\r\n});\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Filter);\r\n","import React from \"react\";\r\n\r\nconst Container = ({ children }) => <div className=\"container\">{children}</div>;\r\n\r\nexport default Container;\r\n","import React, { Component } from \"react\";\r\n\r\nimport Form from \"../components/FormContacts/Form\";\r\nimport Contacts from \"../components/Contacts/ContactsList\";\r\nimport Filter from \"../components/Filter/Filter\";\r\nimport Container from \"../components/Container/Container\";\r\nimport contactsOperations from \"../redux/phonebook/phonebook-operations\";\r\nimport { connect } from \"react-redux\";\r\nimport contactsSelectors from \"../redux/phonebook/phonebook-selectors\";\r\n\r\nclass Phonebook extends Component {\r\n  componentDidMount() {\r\n    this.props.fetchContacts();\r\n  }\r\n  render() {\r\n    return (\r\n      <Container>\r\n        <h1>Phonebook</h1>\r\n        <Form />\r\n        <h2>Contacts</h2>\r\n        <Filter />\r\n        {this.props.isLoadingContacts && <h1>Загружаем...</h1>}\r\n        <Contacts />\r\n      </Container>\r\n    );\r\n  }\r\n}\r\nconst mapStateToProps = (state) => ({\r\n  isLoadingContacts: contactsSelectors.getLoading(state),\r\n});\r\nconst mapDispatchToProps = (dispatch) => ({\r\n  fetchContacts: () => dispatch(contactsOperations.fetchContacts()),\r\n});\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Phonebook);\r\n","import React from \"react\";\r\nimport Phonebook from \"./pages/Phonebook\";\r\n\r\nconst App = () => (\r\n<>\r\n<Phonebook />;\r\n</>\r\n);\r\nexport default App;\r\n","import { combineReducers } from \"redux\";\r\nimport { createReducer } from \"@reduxjs/toolkit\";\r\n// import actions from \"./phonebook-actions\";\r\nimport {\r\n  addContactRequest,\r\n  addContactSuccess,\r\n  addContactError,\r\n  deleteContactRequest,\r\n  deleteContactSuccess,\r\n  deleteContactError,\r\n  changeFilter,\r\n  fetchContactsRequest,\r\n  fetchContactsSuccess,\r\n  fetchContactsError,\r\n} from \"./phonebook-actions\";\r\n\r\nconst items = createReducer([], {\r\n  [fetchContactsSuccess]: (_state, {payload}) => payload,\r\n  [addContactSuccess]: (state, { payload }) => [...state, payload],\r\n  [deleteContactSuccess]: (state, { payload }) =>\r\n    state.filter(({ id }) => id !== payload),\r\n});\r\n\r\nconst filterReducer = createReducer(\"\", {\r\n  [changeFilter]: (_state, action) => action.payload,\r\n});\r\n\r\nconst loading = createReducer(false, {\r\n  [fetchContactsRequest]: () => true,\r\n  [fetchContactsSuccess]: () => false,\r\n  [fetchContactsError]: () => false,\r\n  [addContactRequest]: () => true,\r\n  [addContactSuccess]: () => false,\r\n  [addContactError]: () => false,\r\n  [deleteContactRequest]: () => true,\r\n  [deleteContactSuccess]: () => false,\r\n  [deleteContactError]: () => false,\r\n  \r\n\r\n});\r\nconst error = createReducer(null, {});\r\n\r\nexport default combineReducers({\r\n  items: items,\r\n  filter: filterReducer,\r\n  loading,\r\n  error\r\n});\r\n","/* eslint-disable import/no-anonymous-default-export */\r\n// import storage from \"redux-persist/lib/storage\";\r\nimport {\r\n     FLUSH,\r\n  REHYDRATE,\r\n  PAUSE,\r\n  PERSIST,\r\n  PURGE,\r\n  REGISTER,\r\n} from \"redux-persist\";\r\nimport { configureStore, getDefaultMiddleware } from \"@reduxjs/toolkit\";\r\nimport phonebookReducer from \"./phonebook/phonebook-reducer\";\r\n// import logger from \"redux-logger\";\r\n\r\n//-----------------------------------------------------------------\r\n//-----------Для локал стореджа, прослойку добавляем. костыль убираем ошибки------------//\r\nconst middleware = [\r\n  ...getDefaultMiddleware({\r\n    serializableCheck: {\r\n      ignoredActions: [FLUSH, REHYDRATE, PAUSE, PERSIST, PURGE, REGISTER],\r\n    },\r\n  }),\r\n  // logger,\r\n];\r\n//---------------------------------------------------------------\r\n\r\n//-----Добавляем ключ локал сторедж----\r\n// const persistConfig = {\r\n//   key: \"contacts\",\r\n//   storage,\r\n//   blacklist: [\"filter\"],\r\n// };\r\n// //-------------------------------------\r\n\r\nconst store = configureStore({\r\n  reducer: {\r\n    contacts:  phonebookReducer,\r\n  },\r\n  middleware: middleware,\r\n  devToold: process.env.NODE_ENV === \"development\",\r\n});\r\n\r\n// const persistor = persistStore(store);\r\n\r\n// export default { store, persistor };\r\nexport default store;\r\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport { Provider } from \"react-redux\";\nimport store from \"./redux/store\";\n// import { PersistGate } from \"redux-persist/integration/react\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      {/* <PersistGate loading={null} persistor={store.persistor}> */}\n        <App />\n      {/* </PersistGate> */}\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}